import { deepStrictEqual, rejects } from 'node:assert';
import { describe, should } from 'micro-should';
import * as pgp from '../esm/pgp.js';
import { hex, utf8 } from '@scure/base';
import { ed25519 } from '@noble/curves/ed25519';

// Generated by gpg (GnuPG) 2.3.3, libgcrypt 1.9.4
// First empty line inside armor is stripped to make sure there it is exact as our output
const PRIV = `-----BEGIN PGP PRIVATE KEY BLOCK-----

lIYEYZkw6BYJKwYBBAHaRw8BAQdAg0R9uOUUpnFA+owCdbOkQnyXx6h7RkDcLn9y
KcRRVVn+BwMCMbM6S1DGYvTwghmEwscM1g8Pv2ULbmZurVnlfNEB5VlURavNbf29
9vFszXdoBhIoHdvYX4Y1ueAuJhSW+ax+JEfQJQBPqzkWrNaOs1TeeLQeSm9obiBE
b2UgPGV4YW1wbGVAZXhhbXBsZS5jb20+iJQEExYKADwWIQSuELnesWtuPXyJZvoo
TA4wFkYIeAUCYZkw6AIbAwULCQgHAgMiAgEGFQoJCAsCBBYCAwECHgcCF4AACgkQ
KEwOMBZGCHhe/gEAtLhHurG3qUum79lMT6yX1I/5P+h+j+9nkRurixFBz5oA/0w8
T0MkaQWp1JDCfO8Y5nlE2lTseJ86zPCwZCRm0pUJnIsEYZkw6BIKKwYBBAGXVQEF
AQEHQAhe17QiohzSF1A+VCkF2QESiwqEowxiINg3Yd5AN1gsAwEIB/4HAwIFDB8+
Rr/MjfCrVL5H3GXorEeKotHsewx8M3ak5uDVsWvtyEIow5XyD294xHRPjC40+YT2
mK7abrzh66kcntOO6XNo4M1fffbftCqCfCC6iHgEGBYKACAWIQSuELnesWtuPXyJ
ZvooTA4wFkYIeAUCYZkw6AIbDAAKCRAoTA4wFkYIeIY/AQDYev3xwXBq+qRn3SNH
5ogrjYMghF1HweCCmclLKTTBUQD/VFncDGnQeXtsQHrFkkliTWy9Lwi/WPBtha4u
p2xTgwU=
=ipHm
-----END PGP PRIVATE KEY BLOCK-----
`;

const PUB = `-----BEGIN PGP PUBLIC KEY BLOCK-----

mDMEYZkw6BYJKwYBBAHaRw8BAQdAg0R9uOUUpnFA+owCdbOkQnyXx6h7RkDcLn9y
KcRRVVm0HkpvaG4gRG9lIDxleGFtcGxlQGV4YW1wbGUuY29tPoiUBBMWCgA8FiEE
rhC53rFrbj18iWb6KEwOMBZGCHgFAmGZMOgCGwMFCwkIBwIDIgIBBhUKCQgLAgQW
AgMBAh4HAheAAAoJEChMDjAWRgh4Xv4BALS4R7qxt6lLpu/ZTE+sl9SP+T/ofo/v
Z5Ebq4sRQc+aAP9MPE9DJGkFqdSQwnzvGOZ5RNpU7HifOszwsGQkZtKVCbg4BGGZ
MOgSCisGAQQBl1UBBQEBB0AIXte0IqIc0hdQPlQpBdkBEosKhKMMYiDYN2HeQDdY
LAMBCAeIeAQYFgoAIBYhBK4Qud6xa249fIlm+ihMDjAWRgh4BQJhmTDoAhsMAAoJ
EChMDjAWRgh4hj8BANh6/fHBcGr6pGfdI0fmiCuNgyCEXUfB4IKZyUspNMFRAP9U
WdwMadB5e2xAesWSSWJNbL0vCL9Y8G2Fri6nbFODBQ==
=d0Ek
-----END PGP PUBLIC KEY BLOCK-----
`;

const USER = 'John Doe <example@example.com>';
const PWD = '123456789';
const CREATED = 1637429480;

describe('pgp', () => {
  should('OID', () => {
    deepStrictEqual(hex.encode(pgp.oid.encode('1.2.840.10045.3.1.7')), '2a8648ce3d030107');
    deepStrictEqual(pgp.oid.decode(pgp.oid.encode('1.2.840.10045.3.1.7')), '1.2.840.10045.3.1.7');
  });
  should('PacketLen', () => {
    deepStrictEqual(pgp.PacketLen.encode(100), new Uint8Array([0x64]));
    deepStrictEqual(pgp.PacketLen.encode(1723), new Uint8Array([0xc5, 0xfb]));
    deepStrictEqual(pgp.PacketLen.encode(100000), new Uint8Array([0xff, 0x00, 0x01, 0x86, 0xa0]));

    deepStrictEqual(pgp.PacketLen.decode(new Uint8Array([0x64])), 100);
    deepStrictEqual(pgp.PacketLen.decode(new Uint8Array([0xc5, 0xfb])), 1723);
    deepStrictEqual(pgp.PacketLen.decode(new Uint8Array([0xff, 0x00, 0x01, 0x86, 0xa0])), 100000);
  });
  should('PGP', () => {
    const edPriv = hex.decode('6c18b9d6dc5d18a933c704c56ed8165a0651b27856ce3345f52f2921666dcef1');
    const cvPriv = hex.decode('58cf48afad21cbf3e2d904387df28a1385c8a1b790f28e04ca7eb721fd6c0d6b');
    const edSalt = hex.decode('31b33a4b50c662f4');
    const edIV = hex.decode('821984c2c70cd60f0fbf650b6e666ead');
    const cvSalt = hex.decode('050c1f3e46bfcc8d');
    const cvIV = hex.decode('ab54be47dc65e8ac478aa2d1ec7b0c7c');
    const pubKey = pgp.formatPublic(edPriv, cvPriv, USER, CREATED);
    const privKey = pgp.formatPrivate(
      edPriv,
      cvPriv,
      USER,
      PWD,
      CREATED,
      edSalt,
      edIV,
      cvSalt,
      cvIV
    );
    deepStrictEqual(pgp.pubArmor.decode(pubKey), pgp.pubArmor.decode(PUB), 'publicKey (stream)');
    deepStrictEqual(pubKey, PUB, 'publicKey (armor)');
    deepStrictEqual(
      pgp.privArmor.decode(privKey),
      pgp.privArmor.decode(PRIV),
      'privateKey (stream)'
    );
    deepStrictEqual(privKey, PRIV, 'privateKey (armor)');
    deepStrictEqual(
      pgp.decodeSecretKey(PWD, pgp.privArmor.decode(PRIV)[0].data),
      48893474592257195969419733099033914136114698516948265455201948185088704237297n
    );
    deepStrictEqual(
      pgp.decodeSecretKey(PWD, pgp.privArmor.decode(PRIV)[3].data),
      48421196023274373923070909897586368745762760188967824324892067105939602853720n
    );
  });
  const NAME_EMAIL = 'a <a>';
  const seed = hex.decode('29f47c314ee8b1c77a0b7e4c0043a04a20af46f10132855b79f9ff6c4f8a8ed9');
  should('PGP Keys', () => {
    const { publicKey: pub } = pgp.getKeys(seed, NAME_EMAIL, PWD, 0);
    deepStrictEqual(
      pub,
      `-----BEGIN PGP PUBLIC KEY BLOCK-----

mDMEAAAAABYJKwYBBAHaRw8BAQdA2QIU3+eeQjGWpvS2/6iR3CbKu6iq+JbnM4HL
kyRFkfm0BWEgPGE+iJQEExYKADwWIQQzKMoIOBaUYqaTmfoamwl0PC4LXgUCAAAA
AAIbAwULCQgHAgMiAgEGFQoJCAsCBBYCAwECHgcCF4AACgkQGpsJdDwuC147OwEA
pgliM0hV4XfbsZMUyGci9pjsMRZO53tOobWdvhu8Gs8BAKwlB+XKCh9+kVBvxoZt
hHVBDgq0RFd26LRYHOg7bTcNuDgEAAAAABIKKwYBBAGXVQEFAQEHQBQ0JxdcnQhq
oDJmCZPdPTLT8aluxJBpIIqdZHOZBBk1AwEIB4h4BBgWCgAgFiEEMyjKCDgWlGKm
k5n6GpsJdDwuC14FAgAAAAACGwwACgkQGpsJdDwuC14bXgD/WBl23FKvTCTFnbt0
ltbVab4qEXPlSWkzfVyNGJfn9WsA/ja+yuocyI04UU8Wx5JK7iAlmFpnDmQtH6A6
fTxMaZcG
=6pnW
-----END PGP PUBLIC KEY BLOCK-----
`
    );
    const { publicKey: pub2 } = pgp.getKeys(seed, NAME_EMAIL, PWD, 123);
    deepStrictEqual(pub2 !== pub, true);
    deepStrictEqual(
      pub2,
      `-----BEGIN PGP PUBLIC KEY BLOCK-----

mDMEAAAAexYJKwYBBAHaRw8BAQdA2QIU3+eeQjGWpvS2/6iR3CbKu6iq+JbnM4HL
kyRFkfm0BWEgPGE+iJQEExYKADwWIQRnAFrpj5zsKWjJUsGjAb/LbAwBBwUCAAAA
ewIbAwULCQgHAgMiAgEGFQoJCAsCBBYCAwECHgcCF4AACgkQowG/y2wMAQee4gEA
qBdI8T8Dy1ImB1OtuBcnMq8xyV6iGn3LU5KFzn1AEzIA/3/FKasXRqLkQcDNXkqj
lWO1aZBR+SfRdBKhrNgPJOUOuDgEAAAAexIKKwYBBAGXVQEFAQEHQBQ0JxdcnQhq
oDJmCZPdPTLT8aluxJBpIIqdZHOZBBk1AwEIB4h4BBgWCgAgFiEEZwBa6Y+c7Clo
yVLBowG/y2wMAQcFAgAAAHsCGwwACgkQowG/y2wMAQebUwEAhzh0SQPNIoymV04j
oI1noKMUcAccBWq0IPXjfz3rUK0A/R04pwHhkHh4dBVDxoR3CyHYK9HRMXSZVBL1
jPfr1XwC
=HQ9C
-----END PGP PUBLIC KEY BLOCK-----
`
    );
    // Cannot verify priv here since it has dynamic IV and stuff
  });
  should('Detached', () => {
    const pubKey = ed25519.getPublicKey(seed);
    const NAME = 'John Doe';
    const EMAIL = 'example@example.com';
    const FULL_NAME = `${NAME} <${EMAIL}>`;
    const keys = pgp.getKeys(seed, FULL_NAME, PWD, 0);
    // NOTE: signed as bytes!
    const commit = utf8.decode(
      'tree 4cf9f177c4c015836fca6a31f9c3917e89ae29ec\n' +
        'author John Doe <example@example.com> 0 +0000\n' +
        'committer John Doe <example@example.com> 0 +0000\n' +
        '\n' +
        'Initial commit\n'
    );
    const signature =
      '-----BEGIN PGP SIGNATURE-----\n' +
      '\n' +
      'iHUEABYKAB0WIQQzKMoIOBaUYqaTmfoamwl0PC4LXgUCAAAAAAAKCRAamwl0PC4L\n' +
      'Xi1HAP9YmLXuczZz1r8f2u7ouCjhVv/jCyyVKV0kS59NL6qadAD+LQNFbobvxs33\n' +
      'UB3Q9Co0hX0XOwmhTBxZX86oYz64AQQ=\n' +
      '=Lpwi\n' +
      '-----END PGP SIGNATURE-----\n';
    deepStrictEqual(pgp.signDetached(seed, commit, keys.fingerprint, 0), signature);
    deepStrictEqual(pgp.verifyDetached(pubKey, signature, commit, keys.fingerprint), true);
  });
  describe('parsePrivateKey', () => {
    should('basic', async () => {
      const NAME = 'John Doe';
      const EMAIL = 'example@example.com';
      const FULL_NAME = `${NAME} <${EMAIL}>`;
      const keys = pgp.getKeys(seed, FULL_NAME, undefined, 0);
      const parsed = await pgp.parsePrivateKey(keys.privateKey);
      deepStrictEqual(parsed.fingerprint, keys.fingerprint);
      deepStrictEqual(parsed.keyId, keys.keyId);
      deepStrictEqual(parsed.created, 0);
      deepStrictEqual(parsed.privateKey, seed);
    });
    should('password protected', async () => {
      const NAME = 'John Doe';
      const EMAIL = 'example@example.com';
      const FULL_NAME = `${NAME} <${EMAIL}>`;
      const keys = pgp.getKeys(seed, FULL_NAME, PWD, 123);
      await rejects(() => pgp.parsePrivateKey(keys.privateKey));
      const parsed = await pgp.parsePrivateKey(keys.privateKey, () => PWD);
      deepStrictEqual(parsed.fingerprint, keys.fingerprint);
      deepStrictEqual(parsed.keyId, keys.keyId);
      deepStrictEqual(parsed.created, 123);
      deepStrictEqual(parsed.privateKey, seed);
    });
  });
});

should.runWhen(import.meta.url);
